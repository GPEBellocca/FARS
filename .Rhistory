n_samples <- 100
sample_size <- 0.9
mldfm_subsampling_result <- mldfm_subsampling(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0,
n_samples = n_samples,
sample_size = sample_size,
seed = 123)
devtools::load_all("./FARS")
# Subsampling
n_samples <- 100
sample_size <- 0.9
mldfm_subsampling_result <- mldfm_subsampling(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0,
n_samples = n_samples,
sample_size = sample_size,
seed = 123)
devtools::load_all("./FARS")
# Subsampling
n_samples <- 100
sample_size <- 0.9
mldfm_subsampling_result <- mldfm_subsampling(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0,
n_samples = n_samples,
sample_size = sample_size,
seed = 123)
devtools::load_all("./FARS")
# Create stressed scenario
scenario <- create_scenario(model = mldfm_result,
subsample = mldfm_subsampling_result,
data = data,
block_ind = block_ind,
n_samples = n_samples,
alpha=0.95)
# Compute Quantiles
fars_result <- compute_fars(dep_variable,
mldfm_result$Factors,
scenario = scenario,
h = 1,
edge = 0.05,
min = TRUE)
devtools::load_all("./FARS")
# Compute Quantiles
fars_result <- compute_fars(dep_variable,
mldfm_result$Factors,
scenario = scenario,
h = 1,
edge = 0.05,
min = TRUE)
devtools::load_all("./FARS")
# Compute Quantiles
fars_result <- compute_fars(dep_variable,
mldfm_result$Factors,
scenario = scenario,
h = 1,
edge = 0.05,
min = TRUE)
devtools::load_all("./FARS")
# Density
density <- density(fars_result$Quantiles,
levels = fars_result$Levels,
est_points = 512,
random_samples = 100000,
seed = 123)
devtools::load_all("./FARS")
# Density
density <- nl_density(fars_result$Quantiles,
levels = fars_result$Levels,
est_points = 512,
random_samples = 100000,
seed = 123)
#GaR
GaR0.05 <- quantile_risk(density, QTAU = 0.05)
GaR0.50 <- quantile_risk(density, QTAU = 0.50)
GaR0.95 <- quantile_risk(density, QTAU = 0.95)
# Density
scenario_density <- nl_density(fars_result$Scenario_Quantiles,
levels = fars_result$Levels,
est_points = 512,
random_samples = 100000,
seed = 123)
#GiS
GiS0.05 <- quantile_risk(scenario_density, QTAU = 0.05)
GiS0.25 <- quantile_risk(scenario_density, QTAU = 0.25)
GiS0.50 <- quantile_risk(scenario_density, QTAU = 0.50)
GiS0.75 <- quantile_risk(scenario_density, QTAU = 0.75)
GiS0.95 <- quantile_risk(scenario_density, QTAU = 0.95)
# Check out of sample (h step) and plot
print(GaR0.05[59])
print(GaR0.50[59])
print(GaR0.95[59])
print(GiS0.05[59])
print(GiS0.50[59])
print(GiS0.95[59])
time <- dates[-1]
MLGaRGiS <- data.frame(
time = time,
dep_variable = as.vector(dep_variable[2:59]),
GaR.05 = as.vector(GaR0.05[1:58]),
GaR.95 = as.vector(GaR0.95[1:58]),
GiS.05 = as.vector(GiS0.05[1:58]),
GiS.25 = as.vector(GiS0.25[1:58]),
GiS.75 = as.vector(GiS0.75[1:58]),
GiS.95 = as.vector(GiS0.95[1:58])
)
p <- ggplot(MLGaRGiS,aes(x=time,y=dep_variable)) +
geom_line() + theme_bw()+
geom_ribbon(aes(ymin=GiS.05,ymax=GiS.95),alpha=0.1,fill="red") +
geom_ribbon(aes(ymin=GiS.25,ymax=GiS.75),alpha=0.1,fill="grey10") +
geom_line(aes(x=time,GaR.05),size=0.1, colour="black",linetype = "dashed")+
geom_line(aes(x=time,GaR.95),size=0.1, colour="black",linetype = "dashed")+
scale_y_continuous("Growth")+
#scale_x_continuous("",breaks=2:59,)+
scale_x_date(date_labels = "%Y", date_breaks = "2 years")+
theme(axis.text.x = element_text(angle = 90))
fig <- ggplotly(p)
fig
p <- ggplot(MLGaRGiS,aes(x=time,y=dep_variable)) +
geom_line() + theme_bw()+
geom_ribbon(aes(ymin=GiS.05,ymax=GiS.95), alpha=0.1, fill="red") +
geom_ribbon(aes(ymin=GiS.25,ymax=GiS.75), alpha=0.1, fill="grey10") +
geom_line(aes(x=time, GaR.05), linewidth=0.1, colour="black", linetype="dashed") +
geom_line(aes(x=time, GaR.95), linewidth=0.1, colour="black", linetype="dashed") +
scale_y_continuous("Growth") +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme(axis.text.x = element_text(angle = 90))
fig <- ggplotly(p)
fig
time <- dates[-1]
MLGaRGiS <- data.frame(
time = time,
dep_variable = as.vector(dep_variable[2:59]),
GaR.05 = as.vector(GaR0.05[1:58]),
GaR.95 = as.vector(GaR0.95[1:58]),
GiS.05 = as.vector(GiS0.05[1:58]),
GiS.25 = as.vector(GiS0.25[1:58]),
GiS.75 = as.vector(GiS0.75[1:58]),
GiS.95 = as.vector(GiS0.95[1:58])
)
p <- ggplot(MLGaRGiS,aes(x=time,y=dep_variable)) +
geom_line() + theme_bw()+
geom_ribbon(aes(ymin=GiS.05,ymax=GiS.95), alpha=0.1, fill="red") +
geom_ribbon(aes(ymin=GiS.25,ymax=GiS.75), alpha=0.1, fill="grey10") +
geom_line(aes(x=time, GaR.05), linewidth=0.1, colour="black", linetype="dashed") +
geom_line(aes(x=time, GaR.95), linewidth=0.1, colour="black", linetype="dashed") +
scale_y_continuous("Growth") +
scale_x_date(date_labels = "%Y", date_breaks = "2 years") +
theme(axis.text.x = element_text(angle = 90))
fig <- ggplotly(p)
fig
library(readxl)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
# MULTI-LEVEL DYNAMIC FACTOR MODEL
# 3 blocks
n_blocks <- 3 # 63 248 208
block_ind <- c(63,311,519)
r <- c(1,0,1,0,1,1,1)
mldfm_result <- mldfm(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0)
print(MLDFM_result)
print(mldfm_result)
summary(mldfm_result)
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
#One Block
# n_blocks <- 1
# r <- c(2)
# block_ind <- c(519)
#
# MLDFM_result <- mldfm(data,
#                       r=r,
#                       blocks = n_blocks,
#                       block_ind = block_ind,
#                       tol = 0.000001,
#                       max_iter = 1000,
#                       method = 0)
# print(MLDFM_result)
# summary(MLDFM_result)
# plot_factors.mldfm(MLDFM_result, dates = dates)
# plot(MLDFM_result,which = "loadings",  var_names = colnames(data_df))
# plot(MLDFM_result, which = "residuals", var_names = colnames(data_df))
# MULTI-LEVEL DYNAMIC FACTOR MODEL
# 3 blocks
n_blocks <- 3 # 63 248 208
block_ind <- c(63,311,519)
r <- c(1,0,1,0,1,1,1)
mldfm_result <- mldfm(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0)
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
library(readxl)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
library(zoo)
library("quantreg")
library(readxl)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
library(readxl)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
library(zoo)
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
# MULTI-LEVEL DYNAMIC FACTOR MODEL
# 3 blocks
n_blocks <- 3 # 63 248 208
block_ind <- c(63,311,519)
r <- c(1,0,1,0,1,1,1)
mldfm_result <- mldfm(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0)
print(mldfm_result)
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::document("./FARS")
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
library(readxl)
library(zoo)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
n_blocks <- 3 # 63 248 208
block_ind <- c(63,311,519)
r <- c(1,0,1,0,1,1,1)
mldfm_result <- mldfm(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0)
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
library(readxl)
library(zoo)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
#One Block
# n_blocks <- 1
# r <- c(2)
# block_ind <- c(519)
#
# MLDFM_result <- mldfm(data,
#                       r=r,
#                       blocks = n_blocks,
#                       block_ind = block_ind,
#                       tol = 0.000001,
#                       max_iter = 1000,
#                       method = 0)
# print(MLDFM_result)
# summary(MLDFM_result)
# plot_factors.mldfm(MLDFM_result, dates = dates)
# plot(MLDFM_result,which = "loadings",  var_names = colnames(data_df))
# plot(MLDFM_result, which = "residuals", var_names = colnames(data_df))
# MULTI-LEVEL DYNAMIC FACTOR MODEL
# 3 blocks
n_blocks <- 3 # 63 248 208
block_ind <- c(63,311,519)
r <- c(1,0,1,0,1,1,1)
mldfm_result <- mldfm(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0)
plot(mldfm_result)
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::document("./FARS")
devtools::load_all("./FARS")
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
detach("package:FARS", unload=TRUE)
devtools::load_all()
devtools::load_all("./FARS")
plot(mldfm_result)
library(readxl)
library(zoo)
library(devtools)
devtools::load_all("./FARS")
# Input dep variable
data_input <- read_excel("./FARS/data/Data_IMF.xlsx",sheet = "data")
data_ts <- ts(data_input[, -1], frequency = 4)
data_diff <- diff(log(data_ts)) * 400
dep_variable <- data_diff[, 'United States', drop = FALSE]
dep_variable <- dep_variable[2:60]
# Input data
data_df <- openxlsx::read.xlsx("./FARS/data/DataBase.xlsx",sheet = "fulldata",cols =2:625)
data_df <- data_df[,1:519]
data <- as.matrix(data_df)
dimnames(data) <- NULL
# Generate dates
quarters <- as.yearqtr(seq(from = as.yearqtr("2005 Q2"), by = 0.25, length.out = 59))
dates <- as.Date(quarters)  # Converts to Date for ggplot
#One Block
# n_blocks <- 1
# r <- c(2)
# block_ind <- c(519)
#
# MLDFM_result <- mldfm(data,
#                       r=r,
#                       blocks = n_blocks,
#                       block_ind = block_ind,
#                       tol = 0.000001,
#                       max_iter = 1000,
#                       method = 0)
# print(MLDFM_result)
# summary(MLDFM_result)
# plot_factors.mldfm(MLDFM_result, dates = dates)
# plot(MLDFM_result,which = "loadings",  var_names = colnames(data_df))
# plot(MLDFM_result, which = "residuals", var_names = colnames(data_df))
# MULTI-LEVEL DYNAMIC FACTOR MODEL
# 3 blocks
n_blocks <- 3 # 63 248 208
block_ind <- c(63,311,519)
r <- c(1,0,1,0,1,1,1)
mldfm_result <- mldfm(data,
r=r,
blocks = n_blocks,
block_ind = block_ind ,
tol = 1e-6,
max_iter = 1000,
method = 0)
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
.rs.restartR()
devtools::load_all()
plot(mldfm_result)
devtools::load_all("./FARS")
plot(mldfm_result)
setwd("./FARS")
devtools::check()
install.packages(c("anytime", "BH", "bit", "bit64", "boot", "broom", "bslib", "class", "cli", "clock", "cluster", "commonmark", "cpp11", "curl", "data.table", "dials", "doBy", "doFuture", "evaluate", "fields", "fontawesome", "foreign", "fs", "gert", "gtable", "hardhat", "Hmisc", "httr2", "insight", "jsonlite", "KernSmooth", "knitr", "later", "lfe", "lme4", "locfit", "lubridate", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mime", "multcomp", "nlme", "nloptr", "nnet", "openssl", "openxlsx", "parallelly", "parsnip", "pillar", "pkgbuild", "posterior", "processx", "promises", "ps", "purrr", "quantreg", "QuickJSR", "R6", "Rcpp", "RcppArmadillo", "RCurl", "Rdpack", "readxl", "recipes", "rgl", "rlang", "rmarkdown", "rpart", "rqPen", "rstan", "sessioninfo", "shiny", "sp", "spatial", "stringi", "survival", "systemfonts", "testthat", "textshaping", "TH.data", "tidymodels", "tidyquant", "tinytex", "tsibble", "tune", "tzdb", "UComp", "usethis", "V8", "waldo", "withr", "workflows", "writexl", "xfun", "xgboost", "xml2", "zip", "zoo"))
devtools::check()
